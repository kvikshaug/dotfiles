#!/usr/bin/fish

# Basic shortcuts
function l -d "ll shortcut"; ll $argv; end
function ll -d "Customize dirlisting"; ls -lh --group-directories-first $argv; end
function mv -d "verbose mv"; mv -v $argv; end
function cp -d "verbose cp"; cp -v $argv; end
function rm -d "verbose rm, and confirm removal"; rm -iv $argv; end
function rmdir -d "verbose rmdir"; rmdir -v $argv; end
function ssh -d "verbose ssh"; ssh -v $argv; end
function cal -d "Monday is first weekday"; cal -m $argv; end
function pgrep -d "more info for pgrep"
  set pidlist (command pgrep -d, -x $argv)
  if test -n "$pidlist"
    ps -fp $pidlist
  end
end
function mkcd -d "mkdir AND cd to it in one go!"
  mkdir -p $argv
  if test $status = 0
    cd $argv
  end
end

function keyhashes -d "View server key-hashes"
  for key in (command ls /etc/ssh/ssh_*_key.pub)
    ssh-keygen -lf $key
  end
end


# Applications
function m -d "mplayer shortcut"; mplayer $argv; end
function p -d "xpdf shortcut"; xpdf $argv &; end
function top -d "Use htop, not top"; htop; end
function r -d "ranger shortcut"; ranger $argv; end
function iftop -d "iftop"; sudo iftop $argv -c ~/.iftoprc; end
function ec -d "Add emacs buffer"; emacsclient -n; end
function e -d "Start emacs"; emacs -nw; end
function gitk -d "Always use --all"; gitk --all $argv; end
function sctl -d "supervisorctl shortcut"; supervisorctl $argv; end
function feh -d "Start feh, assuming some options";
  # if no arguments, start in current dir
  if test "$argv" = ""
    /usr/bin/feh -.F -d -Sname .
  # if some arguments, let user specify dir
  else
    /usr/bin/feh -.F -d -Sname $argv
  end
end
function netstat -d "Netstat with some commonly used options"
  command sudo netstat --numeric --inet -p $argv
end
function easy_install
  echo "pip installs packages. Python packages. An easy_install replacement."
end


# Other stuff
function scpsyspub -d "scp files to my sysrq public_html directory"
  scp $argv murray@sysrq.no:~/public_html/
end

function servedir -d "Serve files of cwd"
  ifconfig | grep "inet addr"
  python -m SimpleHTTPServer
end

function checkip -d "Print this machines external IP address"
  wget http://checkip.dyndns.org/ -O - -o /dev/null | cut -d\  -f 6 | cut -d\< -f 1;
end

function record -d "Record from soundcard output and save the result as mp3"
  arecord -f cd -d 7200 | lame -h - ~/out.mp3
  echo Saved file to ~/out.mp3
end

function sendkey -d "Send ssh public key to some remote host (ssh-copy-id alternative)"
  if test -f ~/.ssh/id_rsa.pub
    if test (count $argv) -lt 2
      set port 22
    else
      set port $argv[2]
    end
    if test (count $argv) -gt 0
      ssh $argv[1] -p $port "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_rsa.pub
    end
  else
    echo "There is no ~/.ssh/id_rsa.pub, please generate your keys with 'ssh-keygen'"
  end
end

function xpc -d "Get xprop instance, class and title";
  xprop |awk '
    /^WM_CLASS/{sub(/.* =/, "instance:"); sub(/,/, "\nclass:"); print}
    /^WM_NAME/{sub(/.* =/, "title:"); print}'
end

function 3gptoflv -d "Convert 3gp to flv"
  for i in $argv
    ffmpeg -i $i  -ar 22050 -ab 32 -f flv -s 320x240 $i.flv
  end
end

function prettyJson -d "Pretty-print json (/usr/bin/prettify_json.rb works fine too)"
  echo "Use /usr/local/bin/pjson"
end

#function prettyJson -d "Pretty-print json (/usr/bin/prettify_json.rb works fine too)"
#  python -m json.tool
#end

function scalaapi -d "Open the local scala API in opera"
  echo "Currently 2.9.0.1"
  opera ~/usr/stuff/scala-2.9.0.1-devel-docs/api/index.html
end

function webcam -d "Start webcam with mplayer"
  mplayer tv:// -tv driver=v4l2:width=640:height=480:device=/dev/video0 -fps 15 -vf screenshot
end

function record -d "Record from webcam"
  ffmpeg -f v4l2 -s 640x480 -i /dev/video0 out.mpg
end

function playall
  for i in (/bin/ls)
      m $i
  end
end

function man
  if test "$argv[1]" = "lsof"
    echo http://danielmiessler.com/study/lsof/
  else
    command man $argv
  end
end

